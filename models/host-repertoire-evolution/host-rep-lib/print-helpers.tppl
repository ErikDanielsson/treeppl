import "container-types.tppl"
import "stdlib::seq.mc"

function seqStr(s: Real[]) {
  return join(sapply(
    s,
    function (r: Real) {
      return join([real2string(r), ", "]);
    }
  ));
}

function printSeq(s: Real[]): () {
  printLn(seqStr(s));
}

function printRowMtxSeq(s: Matrix[Real][]) {
  if length(s) == 0 {
    printLn("--no-mat");
    return;
  }
  let d = dim(s[1])[2];
  let strValue = function(r: Int, c: Int) {
    return join([real2string(mtxGet(1, r, s[c])), ", "]);
  };
  let printRow = function(r: Int) {
    printLn(
      join(
        sapply(
          range(1, length(s) + 1, 1),
          strValue(r) // Curried
        )
      )
    );
  };
  sapply(
    range(1, d + 1, 1),
    printRow 
  );
}



function printSeqInt(s: Int[], i: Int, max: Int): () {
  if i <= max {
    print(int2string(s[i]));
    printSeqInt(s, i + 1, max);
  } else{
    printLn("");
  }
}

function eventStr(e: Event) {
  return join([
    int2string(e.host), ": ", int2string(e.fromState), "->", int2string(e.toState), "(", real2string(e.eventTime), "),"
  ]);
}

function printEvent(e: Event) {
  printLn(eventStr(e));
}

function printEvents(es: Event[]) {
  let strs = join(sapply(es, eventStr));
  printLn(strs);
}