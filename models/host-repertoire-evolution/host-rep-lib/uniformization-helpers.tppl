import "lib.mc"
import "container-types.tppl"
import "stdlib::seq.mc"

function invTransSampleNEvents(
  u: Real,
  unifParams: UniformizationParams,
  t: Real,
  a: Int,
  b: Int
): Int {
  /*
   * Sample the number of events conditional on the end state with 
   * inverse transform sampling. 
   * The formula is 
   * 
   *  P[N(t) = n | X(t) = b, X(0) = a]
   *    = P[N(t) = n, X(t) = b | X(0) = a] / P[X(t) = b | X(0) = a] 
   *    = exp(-t * nu) * (nu * t)^t / n! (R^n)_{ab} / P(t)_{ab}
   * 
   * where R is the uniformized transition matrix and P(t) = exp(Qt).
   * 
   * For alignment reasons we pass the uniform variable `u` into the sampler
   */

  let poissonProb = exp(-unifParams.nu * t);
  let branchKernel = mtxExp(mtxSclrMul(t, unifParams.qMatrix)); 
  // Compute the total probability of the transition (i.e P[X(t) = b | X(0) = a])
  let totalTransProb = mtxGet(a + 1, b + 1, branchKernel);
  // Compute the probability of there no event on branch
  let accProb = poissonProb * bool2real(a == b) / totalTransProb;
  if u < accProb {
    return 0;
  } else {
    let nStates = dim(unifParams.qMatrix)[1];
    let firstRa = mtxRowKroneckerDelta(a + 1, nStates);
    return eventHelper(
      u,
      1,
      unifParams,
      t,
      b,
      firstRa,
      totalTransProb,
      poissonProb,
      accProb
    );
  }
}

function eventHelper(
  u: Real,
  n: Int,
  unifParams: UniformizationParams,
  t: Real,
  b: Int,
  prevRa: Matrix[Real],
  totalTransProb: Real,
  prevPoissonVal: Real,
  accProb: Real
): Int {
  // Compute the probabilities of being in different states after n steps
  let newRa = mtxMul(prevRa, unifParams.uMatrix);
  // Get the probability of being in state b after n steps
  let rab = mtxGet(1, b + 1, newRa);
  // Accumulate the Poisson probability at n
  let newPoissonVal = prevPoissonVal * unifParams.nu * t / Real(n);
  // Compute the pmf at n 
  let newProb = newPoissonVal * rab / totalTransProb;
  // Accumulate the acceptance probabiltity
  let newAccProb = accProb + newProb;
  if u < newAccProb {
    return n;
  } else {
    return eventHelper(
      u,
      n + 1,
      unifParams,
      t,
      b,
      newRa,
      totalTransProb,
      newPoissonVal,
      newAccProb
    );
  }
}

function getEventTimes(
  nEvents: Int, startTime: Real, endTime: Real
): Real[] {
  // Sample n uniform variables on the branch
  let unorderedEventTimes = sapply(
    range(0, nEvents, 1),
    function(i: Int) {
      assume eT ~ Uniform(startTime, endTime);
      return eT;
    }
  );
  // Sort the events
  let eventTimes = qSort(
    function (time1: Real, time2: Real ) {
      if (time1 < time2) {
        return 1;
      } else {
        return -1;
      }
    },
    unorderedEventTimes
  );
  return eventTimes;
}

