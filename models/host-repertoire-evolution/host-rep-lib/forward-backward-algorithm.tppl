import "stdlib::seq.mc"
import "lib.mc"
import "dist-helpers.tppl"

type MCTransition = MCTransition {
  fromState: Int,
  toState: Int
}

// Forward-backward algorithm for sampling a Markov chain conditioned on start and end states
function forwardsBackardsAlgorithm(
  kernel: Matrix[Real],
  startState: Int,
  endState: Int,
  nSteps: Int
): MCTransition[] {
  // The backward kernel is the transpose
  let backwardsKernel = mtxTrans(kernel);
  // Compute the backwards messages
  let nStates = dim(kernel)[1];
  // The end state message should be an indicator vector for the final state
  let endStateIndicator = mtxRowKroneckerDelta(endState + 1, nStates);
  let backwardMsgs = fold(
    function (matSeq: Matrix[Real][], i: Int) {
      let prev = matSeq[1];
      let next = mtxMul(prev, backwardsKernel);
      return cons(next, matSeq);
    },
    [endStateIndicator],
    range(1, nSteps, 1)
  );

  // Sample the chain forwards in time
  let samples = sampleStateForwards(1, kernel, startState, backwardMsgs, nSteps);
  return samples;
}

// Sample the markov chain forwards in time, using the information about the end state in the backwards messages
function sampleStateForwards(
  i: Int,
  kernel: Matrix[Real],
  prevState: Int,
  backwardMsgs: Matrix[Real][],
  nSteps: Int
): MCTransition[] {
  if i < nSteps {
    let forwardMsg = mtxGetRow(prevState + 1, kernel); // The forward transition probabilities is just the correct row vector of the kernel
    let backwardMsg = backwardMsgs[i]; // Get the backward transition probabilities 
    let totMsg = mtxNormalize(mtxElemMul(forwardMsg, backwardMsg));
    let param = colMatToSeq(totMsg);
    assume sampleState ~ Categorical(param); // Sample the next state
    let restOfChain = sampleStateForwards(i + 1, kernel, sampleState, backwardMsgs, nSteps);
    return cons(
      MCTransition {fromState = prevState, toState = sampleState},
      restOfChain
    );
  } else {
    return [];
  }
}

function colMatToSeq(mat: Matrix[Real]): Real[] {
  let size = dim(mat)[2];
  return sapply(
    range(1, size + 1, 1),
    function (i: Int) {
      return mtxGet(1, i, mat);
    }
  );
}